import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw }

/**
 * Prisma Client JS version: 2.7.1
 * Query Engine version: 5c2ad460cf4fe8c9330e6640b266c046542c8b6a
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export declare type InputJsonObject = {[Key in string]?: JsonValue}
 
export declare interface InputJsonArray extends Array<JsonValue> {}
 
export declare type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray

declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export declare type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export declare type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/

export declare type Datasource = {
  url?: string
}

export type Datasources = {
  db?: Datasource
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findOne'
  | 'findMany'
  | 'create'
  | 'update'
  | 'updateMany'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'

/**
 * These options are being passed in to the middleware as "params"
 */
export type MiddlewareParams = {
  model?: string
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => Promise<T>,
) => Promise<T>

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Desks
 * const desks = await prisma.desk.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export declare class PrismaClient<
  T extends PrismaClientOptions = PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never
> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Desks
   * const desks = await prisma.desk.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */
  constructor(optionsArg?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * @deprecated renamed to `$on`
   */
  on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  $connect(): Promise<void>;
  /**
   * @deprecated renamed to `$connect`
   */
  connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;
  /**
   * @deprecated renamed to `$disconnect`
   */
  disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * @deprecated renamed to `$executeRaw`
   */
  executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;
 
  /**
   * @deprecated renamed to `$queryRaw`
   */
  queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;

  /**
   * `prisma.desk`: Exposes CRUD operations for the **Desk** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Desks
    * const desks = await prisma.desk.findMany()
    * ```
    */
  get desk(): DeskDelegate;

  /**
   * `prisma.employee`: Exposes CRUD operations for the **Employee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employee.findMany()
    * ```
    */
  get employee(): EmployeeDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const DeskDistinctFieldEnum: {
  id: 'id',
  title: 'title',
  employeeId: 'employeeId'
};

export declare type DeskDistinctFieldEnum = (typeof DeskDistinctFieldEnum)[keyof typeof DeskDistinctFieldEnum]


export declare const EmployeeDistinctFieldEnum: {
  id: 'id',
  name: 'name',
  email: 'email'
};

export declare type EmployeeDistinctFieldEnum = (typeof EmployeeDistinctFieldEnum)[keyof typeof EmployeeDistinctFieldEnum]


export declare const SortOrder: {
  asc: 'asc',
  desc: 'desc'
};

export declare type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]



/**
 * Model Desk
 */

export type Desk = {
  id: number
  title: string
  employeeId: number
}


export type AggregateDesk = {
  count: number
  avg: DeskAvgAggregateOutputType | null
  sum: DeskSumAggregateOutputType | null
  min: DeskMinAggregateOutputType | null
  max: DeskMaxAggregateOutputType | null
}

export type DeskAvgAggregateOutputType = {
  id: number
  employeeId: number
}

export type DeskSumAggregateOutputType = {
  id: number
  employeeId: number
}

export type DeskMinAggregateOutputType = {
  id: number
  employeeId: number
}

export type DeskMaxAggregateOutputType = {
  id: number
  employeeId: number
}


export type DeskAvgAggregateInputType = {
  id?: true
  employeeId?: true
}

export type DeskSumAggregateInputType = {
  id?: true
  employeeId?: true
}

export type DeskMinAggregateInputType = {
  id?: true
  employeeId?: true
}

export type DeskMaxAggregateInputType = {
  id?: true
  employeeId?: true
}

export type AggregateDeskArgs = {
  where?: DeskWhereInput
  orderBy?: Enumerable<DeskOrderByInput>
  cursor?: DeskWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<DeskDistinctFieldEnum>
  count?: true
  avg?: DeskAvgAggregateInputType
  sum?: DeskSumAggregateInputType
  min?: DeskMinAggregateInputType
  max?: DeskMaxAggregateInputType
}

export type GetDeskAggregateType<T extends AggregateDeskArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetDeskAggregateScalarType<T[P]>
}

export type GetDeskAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof DeskAvgAggregateOutputType ? DeskAvgAggregateOutputType[P] : never
}
    
    

export type DeskSelect = {
  id?: boolean
  title?: boolean
  employeeId?: boolean
  Employee?: boolean | EmployeeArgs
}

export type DeskInclude = {
  Employee?: boolean | EmployeeArgs
}

export type DeskGetPayload<
  S extends boolean | null | undefined | DeskArgs,
  U = keyof S
> = S extends true
  ? Desk
  : S extends undefined
  ? never
  : S extends DeskArgs | FindManyDeskArgs
  ? 'include' extends U
    ? Desk  & {
      [P in TrueKeys<S['include']>]:
      P extends 'Employee'
      ? EmployeeGetPayload<S['include'][P]> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Desk ? Desk[P]
: 
      P extends 'Employee'
      ? EmployeeGetPayload<S['select'][P]> : never
    }
  : Desk
: Desk


export interface DeskDelegate {
  /**
   * Find zero or one Desk.
   * @param {FindOneDeskArgs} args - Arguments to find a Desk
   * @example
   * // Get one Desk
   * const desk = await prisma.desk.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneDeskArgs>(
    args: Subset<T, FindOneDeskArgs>
  ): CheckSelect<T, Prisma__DeskClient<Desk | null>, Prisma__DeskClient<DeskGetPayload<T> | null>>
  /**
   * Find zero or more Desks.
   * @param {FindManyDeskArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Desks
   * const desks = await prisma.desk.findMany()
   * 
   * // Get first 10 Desks
   * const desks = await prisma.desk.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const deskWithIdOnly = await prisma.desk.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyDeskArgs>(
    args?: Subset<T, FindManyDeskArgs>
  ): CheckSelect<T, Promise<Array<Desk>>, Promise<Array<DeskGetPayload<T>>>>
  /**
   * Create a Desk.
   * @param {DeskCreateArgs} args - Arguments to create a Desk.
   * @example
   * // Create one Desk
   * const Desk = await prisma.desk.create({
   *   data: {
   *     // ... data to create a Desk
   *   }
   * })
   * 
  **/
  create<T extends DeskCreateArgs>(
    args: Subset<T, DeskCreateArgs>
  ): CheckSelect<T, Prisma__DeskClient<Desk>, Prisma__DeskClient<DeskGetPayload<T>>>
  /**
   * Delete a Desk.
   * @param {DeskDeleteArgs} args - Arguments to delete one Desk.
   * @example
   * // Delete one Desk
   * const Desk = await prisma.desk.delete({
   *   where: {
   *     // ... filter to delete one Desk
   *   }
   * })
   * 
  **/
  delete<T extends DeskDeleteArgs>(
    args: Subset<T, DeskDeleteArgs>
  ): CheckSelect<T, Prisma__DeskClient<Desk>, Prisma__DeskClient<DeskGetPayload<T>>>
  /**
   * Update one Desk.
   * @param {DeskUpdateArgs} args - Arguments to update one Desk.
   * @example
   * // Update one Desk
   * const desk = await prisma.desk.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends DeskUpdateArgs>(
    args: Subset<T, DeskUpdateArgs>
  ): CheckSelect<T, Prisma__DeskClient<Desk>, Prisma__DeskClient<DeskGetPayload<T>>>
  /**
   * Delete zero or more Desks.
   * @param {DeskDeleteManyArgs} args - Arguments to filter Desks to delete.
   * @example
   * // Delete a few Desks
   * const { count } = await prisma.desk.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends DeskDeleteManyArgs>(
    args: Subset<T, DeskDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Desks.
   * @param {DeskUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Desks
   * const desk = await prisma.desk.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends DeskUpdateManyArgs>(
    args: Subset<T, DeskUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Desk.
   * @param {DeskUpsertArgs} args - Arguments to update or create a Desk.
   * @example
   * // Update or create a Desk
   * const desk = await prisma.desk.upsert({
   *   create: {
   *     // ... data to create a Desk
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Desk we want to update
   *   }
   * })
  **/
  upsert<T extends DeskUpsertArgs>(
    args: Subset<T, DeskUpsertArgs>
  ): CheckSelect<T, Prisma__DeskClient<Desk>, Prisma__DeskClient<DeskGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyDeskArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateDeskArgs>(args: Subset<T, AggregateDeskArgs>): Promise<GetDeskAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Desk.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__DeskClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  Employee<T extends EmployeeArgs = {}>(args?: Subset<T, EmployeeArgs>): CheckSelect<T, Prisma__EmployeeClient<Employee | null>, Prisma__EmployeeClient<EmployeeGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Desk findOne
 */
export type FindOneDeskArgs = {
  /**
   * Select specific fields to fetch from the Desk
  **/
  select?: DeskSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: DeskInclude | null
  /**
   * Filter, which Desk to fetch.
  **/
  where: DeskWhereUniqueInput
}


/**
 * Desk findMany
 */
export type FindManyDeskArgs = {
  /**
   * Select specific fields to fetch from the Desk
  **/
  select?: DeskSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: DeskInclude | null
  /**
   * Filter, which Desks to fetch.
  **/
  where?: DeskWhereInput
  /**
   * Determine the order of the Desks to fetch.
  **/
  orderBy?: Enumerable<DeskOrderByInput>
  /**
   * Sets the position for listing Desks.
  **/
  cursor?: DeskWhereUniqueInput
  /**
   * The number of Desks to fetch. If negative number, it will take Desks before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Desks.
  **/
  skip?: number
  distinct?: Enumerable<DeskDistinctFieldEnum>
}


/**
 * Desk create
 */
export type DeskCreateArgs = {
  /**
   * Select specific fields to fetch from the Desk
  **/
  select?: DeskSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: DeskInclude | null
  /**
   * The data needed to create a Desk.
  **/
  data: DeskCreateInput
}


/**
 * Desk update
 */
export type DeskUpdateArgs = {
  /**
   * Select specific fields to fetch from the Desk
  **/
  select?: DeskSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: DeskInclude | null
  /**
   * The data needed to update a Desk.
  **/
  data: DeskUpdateInput
  /**
   * Choose, which Desk to update.
  **/
  where: DeskWhereUniqueInput
}


/**
 * Desk updateMany
 */
export type DeskUpdateManyArgs = {
  data: DeskUpdateManyMutationInput
  where?: DeskWhereInput
}


/**
 * Desk upsert
 */
export type DeskUpsertArgs = {
  /**
   * Select specific fields to fetch from the Desk
  **/
  select?: DeskSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: DeskInclude | null
  /**
   * The filter to search for the Desk to update in case it exists.
  **/
  where: DeskWhereUniqueInput
  /**
   * In case the Desk found by the `where` argument doesn't exist, create a new Desk with this data.
  **/
  create: DeskCreateInput
  /**
   * In case the Desk was found with the provided `where` argument, update it with this data.
  **/
  update: DeskUpdateInput
}


/**
 * Desk delete
 */
export type DeskDeleteArgs = {
  /**
   * Select specific fields to fetch from the Desk
  **/
  select?: DeskSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: DeskInclude | null
  /**
   * Filter which Desk to delete.
  **/
  where: DeskWhereUniqueInput
}


/**
 * Desk deleteMany
 */
export type DeskDeleteManyArgs = {
  where?: DeskWhereInput
}


/**
 * Desk without action
 */
export type DeskArgs = {
  /**
   * Select specific fields to fetch from the Desk
  **/
  select?: DeskSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: DeskInclude | null
}



/**
 * Model Employee
 */

export type Employee = {
  id: number
  name: string | null
  email: string
}


export type AggregateEmployee = {
  count: number
  avg: EmployeeAvgAggregateOutputType | null
  sum: EmployeeSumAggregateOutputType | null
  min: EmployeeMinAggregateOutputType | null
  max: EmployeeMaxAggregateOutputType | null
}

export type EmployeeAvgAggregateOutputType = {
  id: number
}

export type EmployeeSumAggregateOutputType = {
  id: number
}

export type EmployeeMinAggregateOutputType = {
  id: number
}

export type EmployeeMaxAggregateOutputType = {
  id: number
}


export type EmployeeAvgAggregateInputType = {
  id?: true
}

export type EmployeeSumAggregateInputType = {
  id?: true
}

export type EmployeeMinAggregateInputType = {
  id?: true
}

export type EmployeeMaxAggregateInputType = {
  id?: true
}

export type AggregateEmployeeArgs = {
  where?: EmployeeWhereInput
  orderBy?: Enumerable<EmployeeOrderByInput>
  cursor?: EmployeeWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<EmployeeDistinctFieldEnum>
  count?: true
  avg?: EmployeeAvgAggregateInputType
  sum?: EmployeeSumAggregateInputType
  min?: EmployeeMinAggregateInputType
  max?: EmployeeMaxAggregateInputType
}

export type GetEmployeeAggregateType<T extends AggregateEmployeeArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetEmployeeAggregateScalarType<T[P]>
}

export type GetEmployeeAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof EmployeeAvgAggregateOutputType ? EmployeeAvgAggregateOutputType[P] : never
}
    
    

export type EmployeeSelect = {
  id?: boolean
  name?: boolean
  email?: boolean
  Desk?: boolean | FindManyDeskArgs
}

export type EmployeeInclude = {
  Desk?: boolean | FindManyDeskArgs
}

export type EmployeeGetPayload<
  S extends boolean | null | undefined | EmployeeArgs,
  U = keyof S
> = S extends true
  ? Employee
  : S extends undefined
  ? never
  : S extends EmployeeArgs | FindManyEmployeeArgs
  ? 'include' extends U
    ? Employee  & {
      [P in TrueKeys<S['include']>]:
      P extends 'Desk'
      ? Array<DeskGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Employee ? Employee[P]
: 
      P extends 'Desk'
      ? Array<DeskGetPayload<S['select'][P]>> : never
    }
  : Employee
: Employee


export interface EmployeeDelegate {
  /**
   * Find zero or one Employee.
   * @param {FindOneEmployeeArgs} args - Arguments to find a Employee
   * @example
   * // Get one Employee
   * const employee = await prisma.employee.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneEmployeeArgs>(
    args: Subset<T, FindOneEmployeeArgs>
  ): CheckSelect<T, Prisma__EmployeeClient<Employee | null>, Prisma__EmployeeClient<EmployeeGetPayload<T> | null>>
  /**
   * Find zero or more Employees.
   * @param {FindManyEmployeeArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Employees
   * const employees = await prisma.employee.findMany()
   * 
   * // Get first 10 Employees
   * const employees = await prisma.employee.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const employeeWithIdOnly = await prisma.employee.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyEmployeeArgs>(
    args?: Subset<T, FindManyEmployeeArgs>
  ): CheckSelect<T, Promise<Array<Employee>>, Promise<Array<EmployeeGetPayload<T>>>>
  /**
   * Create a Employee.
   * @param {EmployeeCreateArgs} args - Arguments to create a Employee.
   * @example
   * // Create one Employee
   * const Employee = await prisma.employee.create({
   *   data: {
   *     // ... data to create a Employee
   *   }
   * })
   * 
  **/
  create<T extends EmployeeCreateArgs>(
    args: Subset<T, EmployeeCreateArgs>
  ): CheckSelect<T, Prisma__EmployeeClient<Employee>, Prisma__EmployeeClient<EmployeeGetPayload<T>>>
  /**
   * Delete a Employee.
   * @param {EmployeeDeleteArgs} args - Arguments to delete one Employee.
   * @example
   * // Delete one Employee
   * const Employee = await prisma.employee.delete({
   *   where: {
   *     // ... filter to delete one Employee
   *   }
   * })
   * 
  **/
  delete<T extends EmployeeDeleteArgs>(
    args: Subset<T, EmployeeDeleteArgs>
  ): CheckSelect<T, Prisma__EmployeeClient<Employee>, Prisma__EmployeeClient<EmployeeGetPayload<T>>>
  /**
   * Update one Employee.
   * @param {EmployeeUpdateArgs} args - Arguments to update one Employee.
   * @example
   * // Update one Employee
   * const employee = await prisma.employee.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends EmployeeUpdateArgs>(
    args: Subset<T, EmployeeUpdateArgs>
  ): CheckSelect<T, Prisma__EmployeeClient<Employee>, Prisma__EmployeeClient<EmployeeGetPayload<T>>>
  /**
   * Delete zero or more Employees.
   * @param {EmployeeDeleteManyArgs} args - Arguments to filter Employees to delete.
   * @example
   * // Delete a few Employees
   * const { count } = await prisma.employee.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends EmployeeDeleteManyArgs>(
    args: Subset<T, EmployeeDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Employees.
   * @param {EmployeeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Employees
   * const employee = await prisma.employee.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends EmployeeUpdateManyArgs>(
    args: Subset<T, EmployeeUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Employee.
   * @param {EmployeeUpsertArgs} args - Arguments to update or create a Employee.
   * @example
   * // Update or create a Employee
   * const employee = await prisma.employee.upsert({
   *   create: {
   *     // ... data to create a Employee
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Employee we want to update
   *   }
   * })
  **/
  upsert<T extends EmployeeUpsertArgs>(
    args: Subset<T, EmployeeUpsertArgs>
  ): CheckSelect<T, Prisma__EmployeeClient<Employee>, Prisma__EmployeeClient<EmployeeGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyEmployeeArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateEmployeeArgs>(args: Subset<T, AggregateEmployeeArgs>): Promise<GetEmployeeAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Employee.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__EmployeeClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  Desk<T extends FindManyDeskArgs = {}>(args?: Subset<T, FindManyDeskArgs>): CheckSelect<T, Promise<Array<Desk>>, Promise<Array<DeskGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Employee findOne
 */
export type FindOneEmployeeArgs = {
  /**
   * Select specific fields to fetch from the Employee
  **/
  select?: EmployeeSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: EmployeeInclude | null
  /**
   * Filter, which Employee to fetch.
  **/
  where: EmployeeWhereUniqueInput
}


/**
 * Employee findMany
 */
export type FindManyEmployeeArgs = {
  /**
   * Select specific fields to fetch from the Employee
  **/
  select?: EmployeeSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: EmployeeInclude | null
  /**
   * Filter, which Employees to fetch.
  **/
  where?: EmployeeWhereInput
  /**
   * Determine the order of the Employees to fetch.
  **/
  orderBy?: Enumerable<EmployeeOrderByInput>
  /**
   * Sets the position for listing Employees.
  **/
  cursor?: EmployeeWhereUniqueInput
  /**
   * The number of Employees to fetch. If negative number, it will take Employees before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Employees.
  **/
  skip?: number
  distinct?: Enumerable<EmployeeDistinctFieldEnum>
}


/**
 * Employee create
 */
export type EmployeeCreateArgs = {
  /**
   * Select specific fields to fetch from the Employee
  **/
  select?: EmployeeSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: EmployeeInclude | null
  /**
   * The data needed to create a Employee.
  **/
  data: EmployeeCreateInput
}


/**
 * Employee update
 */
export type EmployeeUpdateArgs = {
  /**
   * Select specific fields to fetch from the Employee
  **/
  select?: EmployeeSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: EmployeeInclude | null
  /**
   * The data needed to update a Employee.
  **/
  data: EmployeeUpdateInput
  /**
   * Choose, which Employee to update.
  **/
  where: EmployeeWhereUniqueInput
}


/**
 * Employee updateMany
 */
export type EmployeeUpdateManyArgs = {
  data: EmployeeUpdateManyMutationInput
  where?: EmployeeWhereInput
}


/**
 * Employee upsert
 */
export type EmployeeUpsertArgs = {
  /**
   * Select specific fields to fetch from the Employee
  **/
  select?: EmployeeSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: EmployeeInclude | null
  /**
   * The filter to search for the Employee to update in case it exists.
  **/
  where: EmployeeWhereUniqueInput
  /**
   * In case the Employee found by the `where` argument doesn't exist, create a new Employee with this data.
  **/
  create: EmployeeCreateInput
  /**
   * In case the Employee was found with the provided `where` argument, update it with this data.
  **/
  update: EmployeeUpdateInput
}


/**
 * Employee delete
 */
export type EmployeeDeleteArgs = {
  /**
   * Select specific fields to fetch from the Employee
  **/
  select?: EmployeeSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: EmployeeInclude | null
  /**
   * Filter which Employee to delete.
  **/
  where: EmployeeWhereUniqueInput
}


/**
 * Employee deleteMany
 */
export type EmployeeDeleteManyArgs = {
  where?: EmployeeWhereInput
}


/**
 * Employee without action
 */
export type EmployeeArgs = {
  /**
   * Select specific fields to fetch from the Employee
  **/
  select?: EmployeeSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: EmployeeInclude | null
}



/**
 * Deep Input Types
 */


export type DeskWhereInput = {
  AND?: Enumerable<DeskWhereInput>
  OR?: Array<DeskWhereInput>
  NOT?: Enumerable<DeskWhereInput>
  id?: number | IntFilter
  title?: string | StringFilter
  employeeId?: number | IntFilter
  Employee?: EmployeeWhereInput | null
}

export type DeskOrderByInput = {
  id?: SortOrder
  title?: SortOrder
  employeeId?: SortOrder
}

export type DeskWhereUniqueInput = {
  id?: number
}

export type EmployeeWhereInput = {
  AND?: Enumerable<EmployeeWhereInput>
  OR?: Array<EmployeeWhereInput>
  NOT?: Enumerable<EmployeeWhereInput>
  id?: number | IntFilter
  name?: string | StringNullableFilter | null
  email?: string | StringFilter
  Desk?: DeskListRelationFilter
}

export type EmployeeOrderByInput = {
  id?: SortOrder
  name?: SortOrder
  email?: SortOrder
}

export type EmployeeWhereUniqueInput = {
  id?: number
  email?: string
}

export type DeskCreateInput = {
  title: string
  Employee: EmployeeCreateOneWithoutDeskInput
}

export type DeskUpdateInput = {
  title?: string | StringFieldUpdateOperationsInput
  Employee?: EmployeeUpdateOneRequiredWithoutDeskInput
}

export type DeskUpdateManyMutationInput = {
  title?: string | StringFieldUpdateOperationsInput
}

export type EmployeeCreateInput = {
  name?: string | null
  email: string
  Desk?: DeskCreateManyWithoutEmployeeInput
}

export type EmployeeUpdateInput = {
  name?: string | NullableStringFieldUpdateOperationsInput | null
  email?: string | StringFieldUpdateOperationsInput
  Desk?: DeskUpdateManyWithoutEmployeeInput
}

export type EmployeeUpdateManyMutationInput = {
  name?: string | NullableStringFieldUpdateOperationsInput | null
  email?: string | StringFieldUpdateOperationsInput
}

export type IntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntFilter
}

export type StringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringFilter
}

export type EmployeeRelationFilter = {
  is?: EmployeeWhereInput | null
  isNot?: EmployeeWhereInput | null
}

export type StringNullableFilter = {
  equals?: string | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string | null
  lte?: string | null
  gt?: string | null
  gte?: string | null
  contains?: string | null
  startsWith?: string | null
  endsWith?: string | null
  not?: string | NestedStringNullableFilter | null
}

export type DeskListRelationFilter = {
  every?: DeskWhereInput
  some?: DeskWhereInput
  none?: DeskWhereInput
}

export type EmployeeCreateOneWithoutDeskInput = {
  create?: EmployeeCreateWithoutDeskInput
  connect?: EmployeeWhereUniqueInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type EmployeeUpdateOneRequiredWithoutDeskInput = {
  create?: EmployeeCreateWithoutDeskInput
  connect?: EmployeeWhereUniqueInput
  update?: EmployeeUpdateWithoutDeskDataInput
  upsert?: EmployeeUpsertWithoutDeskInput
}

export type DeskCreateManyWithoutEmployeeInput = {
  create?: Enumerable<DeskCreateWithoutEmployeeInput>
  connect?: Enumerable<DeskWhereUniqueInput>
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type DeskUpdateManyWithoutEmployeeInput = {
  create?: Enumerable<DeskCreateWithoutEmployeeInput>
  connect?: Enumerable<DeskWhereUniqueInput>
  set?: Enumerable<DeskWhereUniqueInput>
  disconnect?: Enumerable<DeskWhereUniqueInput>
  delete?: Enumerable<DeskWhereUniqueInput>
  update?: Enumerable<DeskUpdateWithWhereUniqueWithoutEmployeeInput>
  updateMany?: Enumerable<DeskUpdateManyWithWhereNestedInput> | null
  deleteMany?: Enumerable<DeskScalarWhereInput>
  upsert?: Enumerable<DeskUpsertWithWhereUniqueWithoutEmployeeInput>
}

export type NestedIntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: NestedIntFilter | null
}

export type NestedStringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: NestedStringFilter | null
}

export type NestedStringNullableFilter = {
  equals?: string | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string | null
  lte?: string | null
  gt?: string | null
  gte?: string | null
  contains?: string | null
  startsWith?: string | null
  endsWith?: string | null
  not?: NestedStringNullableFilter | null
}

export type EmployeeCreateWithoutDeskInput = {
  name?: string | null
  email: string
}

export type EmployeeUpdateWithoutDeskDataInput = {
  name?: string | NullableStringFieldUpdateOperationsInput | null
  email?: string | StringFieldUpdateOperationsInput
}

export type EmployeeUpsertWithoutDeskInput = {
  update: EmployeeUpdateWithoutDeskDataInput
  create: EmployeeCreateWithoutDeskInput
}

export type DeskCreateWithoutEmployeeInput = {
  title: string
}

export type DeskUpdateWithWhereUniqueWithoutEmployeeInput = {
  where: DeskWhereUniqueInput
  data: DeskUpdateWithoutEmployeeDataInput
}

export type DeskUpdateManyWithWhereNestedInput = {
  where: DeskScalarWhereInput
  data: DeskUpdateManyDataInput
}

export type DeskScalarWhereInput = {
  AND?: Enumerable<DeskScalarWhereInput>
  OR?: Array<DeskScalarWhereInput>
  NOT?: Enumerable<DeskScalarWhereInput>
  id?: number | IntFilter
  title?: string | StringFilter
  employeeId?: number | IntFilter
}

export type DeskUpsertWithWhereUniqueWithoutEmployeeInput = {
  where: DeskWhereUniqueInput
  update: DeskUpdateWithoutEmployeeDataInput
  create: DeskCreateWithoutEmployeeInput
}

export type DeskUpdateWithoutEmployeeDataInput = {
  title?: string | StringFieldUpdateOperationsInput
}

export type DeskUpdateManyDataInput = {
  title?: string | StringFieldUpdateOperationsInput
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
