import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw }

/**
 * Prisma Client JS version: 2.7.1
 * Query Engine version: 5c2ad460cf4fe8c9330e6640b266c046542c8b6a
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export declare type InputJsonObject = {[Key in string]?: JsonValue}
 
export declare interface InputJsonArray extends Array<JsonValue> {}
 
export declare type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray

declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export declare type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export declare type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/

export declare type Datasource = {
  url?: string
}

export type Datasources = {
  db?: Datasource
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findOne'
  | 'findMany'
  | 'create'
  | 'update'
  | 'updateMany'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'

/**
 * These options are being passed in to the middleware as "params"
 */
export type MiddlewareParams = {
  model?: string
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => Promise<T>,
) => Promise<T>

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Comments
 * const comments = await prisma.comment.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export declare class PrismaClient<
  T extends PrismaClientOptions = PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never
> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Comments
   * const comments = await prisma.comment.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */
  constructor(optionsArg?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * @deprecated renamed to `$on`
   */
  on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  $connect(): Promise<void>;
  /**
   * @deprecated renamed to `$connect`
   */
  connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;
  /**
   * @deprecated renamed to `$disconnect`
   */
  disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * @deprecated renamed to `$executeRaw`
   */
  executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;
 
  /**
   * @deprecated renamed to `$queryRaw`
   */
  queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): CommentDelegate;

  /**
   * `prisma.photo`: Exposes CRUD operations for the **Photo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Photos
    * const photos = await prisma.photo.findMany()
    * ```
    */
  get photo(): PhotoDelegate;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): UserDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const CommentDistinctFieldEnum: {
  id: 'id',
  text: 'text',
  photoId: 'photoId',
  userId: 'userId'
};

export declare type CommentDistinctFieldEnum = (typeof CommentDistinctFieldEnum)[keyof typeof CommentDistinctFieldEnum]


export declare const PhotoDistinctFieldEnum: {
  id: 'id',
  name: 'name',
  imgurl: 'imgurl',
  userId: 'userId'
};

export declare type PhotoDistinctFieldEnum = (typeof PhotoDistinctFieldEnum)[keyof typeof PhotoDistinctFieldEnum]


export declare const UserDistinctFieldEnum: {
  id: 'id',
  name: 'name',
  email: 'email'
};

export declare type UserDistinctFieldEnum = (typeof UserDistinctFieldEnum)[keyof typeof UserDistinctFieldEnum]


export declare const SortOrder: {
  asc: 'asc',
  desc: 'desc'
};

export declare type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]



/**
 * Model Comment
 */

export type Comment = {
  id: number
  text: string
  photoId: number | null
  userId: number | null
}


export type AggregateComment = {
  count: number
  avg: CommentAvgAggregateOutputType | null
  sum: CommentSumAggregateOutputType | null
  min: CommentMinAggregateOutputType | null
  max: CommentMaxAggregateOutputType | null
}

export type CommentAvgAggregateOutputType = {
  id: number
  photoId: number
  userId: number
}

export type CommentSumAggregateOutputType = {
  id: number
  photoId: number | null
  userId: number | null
}

export type CommentMinAggregateOutputType = {
  id: number
  photoId: number | null
  userId: number | null
}

export type CommentMaxAggregateOutputType = {
  id: number
  photoId: number | null
  userId: number | null
}


export type CommentAvgAggregateInputType = {
  id?: true
  photoId?: true
  userId?: true
}

export type CommentSumAggregateInputType = {
  id?: true
  photoId?: true
  userId?: true
}

export type CommentMinAggregateInputType = {
  id?: true
  photoId?: true
  userId?: true
}

export type CommentMaxAggregateInputType = {
  id?: true
  photoId?: true
  userId?: true
}

export type AggregateCommentArgs = {
  where?: CommentWhereInput
  orderBy?: Enumerable<CommentOrderByInput>
  cursor?: CommentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<CommentDistinctFieldEnum>
  count?: true
  avg?: CommentAvgAggregateInputType
  sum?: CommentSumAggregateInputType
  min?: CommentMinAggregateInputType
  max?: CommentMaxAggregateInputType
}

export type GetCommentAggregateType<T extends AggregateCommentArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetCommentAggregateScalarType<T[P]>
}

export type GetCommentAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof CommentAvgAggregateOutputType ? CommentAvgAggregateOutputType[P] : never
}
    
    

export type CommentSelect = {
  id?: boolean
  text?: boolean
  photoId?: boolean
  userId?: boolean
  Photo?: boolean | PhotoArgs
  User?: boolean | UserArgs
}

export type CommentInclude = {
  Photo?: boolean | PhotoArgs
  User?: boolean | UserArgs
}

export type CommentGetPayload<
  S extends boolean | null | undefined | CommentArgs,
  U = keyof S
> = S extends true
  ? Comment
  : S extends undefined
  ? never
  : S extends CommentArgs | FindManyCommentArgs
  ? 'include' extends U
    ? Comment  & {
      [P in TrueKeys<S['include']>]:
      P extends 'Photo'
      ? PhotoGetPayload<S['include'][P]> | null :
      P extends 'User'
      ? UserGetPayload<S['include'][P]> | null : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Comment ? Comment[P]
: 
      P extends 'Photo'
      ? PhotoGetPayload<S['select'][P]> | null :
      P extends 'User'
      ? UserGetPayload<S['select'][P]> | null : never
    }
  : Comment
: Comment


export interface CommentDelegate {
  /**
   * Find zero or one Comment.
   * @param {FindOneCommentArgs} args - Arguments to find a Comment
   * @example
   * // Get one Comment
   * const comment = await prisma.comment.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneCommentArgs>(
    args: Subset<T, FindOneCommentArgs>
  ): CheckSelect<T, Prisma__CommentClient<Comment | null>, Prisma__CommentClient<CommentGetPayload<T> | null>>
  /**
   * Find zero or more Comments.
   * @param {FindManyCommentArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Comments
   * const comments = await prisma.comment.findMany()
   * 
   * // Get first 10 Comments
   * const comments = await prisma.comment.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyCommentArgs>(
    args?: Subset<T, FindManyCommentArgs>
  ): CheckSelect<T, Promise<Array<Comment>>, Promise<Array<CommentGetPayload<T>>>>
  /**
   * Create a Comment.
   * @param {CommentCreateArgs} args - Arguments to create a Comment.
   * @example
   * // Create one Comment
   * const Comment = await prisma.comment.create({
   *   data: {
   *     // ... data to create a Comment
   *   }
   * })
   * 
  **/
  create<T extends CommentCreateArgs>(
    args: Subset<T, CommentCreateArgs>
  ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>
  /**
   * Delete a Comment.
   * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
   * @example
   * // Delete one Comment
   * const Comment = await prisma.comment.delete({
   *   where: {
   *     // ... filter to delete one Comment
   *   }
   * })
   * 
  **/
  delete<T extends CommentDeleteArgs>(
    args: Subset<T, CommentDeleteArgs>
  ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>
  /**
   * Update one Comment.
   * @param {CommentUpdateArgs} args - Arguments to update one Comment.
   * @example
   * // Update one Comment
   * const comment = await prisma.comment.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends CommentUpdateArgs>(
    args: Subset<T, CommentUpdateArgs>
  ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>
  /**
   * Delete zero or more Comments.
   * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
   * @example
   * // Delete a few Comments
   * const { count } = await prisma.comment.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends CommentDeleteManyArgs>(
    args: Subset<T, CommentDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Comments.
   * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Comments
   * const comment = await prisma.comment.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends CommentUpdateManyArgs>(
    args: Subset<T, CommentUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Comment.
   * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
   * @example
   * // Update or create a Comment
   * const comment = await prisma.comment.upsert({
   *   create: {
   *     // ... data to create a Comment
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Comment we want to update
   *   }
   * })
  **/
  upsert<T extends CommentUpsertArgs>(
    args: Subset<T, CommentUpsertArgs>
  ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyCommentArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateCommentArgs>(args: Subset<T, AggregateCommentArgs>): Promise<GetCommentAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Comment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__CommentClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  Photo<T extends PhotoArgs = {}>(args?: Subset<T, PhotoArgs>): CheckSelect<T, Prisma__PhotoClient<Photo | null>, Prisma__PhotoClient<PhotoGetPayload<T> | null>>;

  User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Comment findOne
 */
export type FindOneCommentArgs = {
  /**
   * Select specific fields to fetch from the Comment
  **/
  select?: CommentSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CommentInclude | null
  /**
   * Filter, which Comment to fetch.
  **/
  where: CommentWhereUniqueInput
}


/**
 * Comment findMany
 */
export type FindManyCommentArgs = {
  /**
   * Select specific fields to fetch from the Comment
  **/
  select?: CommentSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CommentInclude | null
  /**
   * Filter, which Comments to fetch.
  **/
  where?: CommentWhereInput
  /**
   * Determine the order of the Comments to fetch.
  **/
  orderBy?: Enumerable<CommentOrderByInput>
  /**
   * Sets the position for listing Comments.
  **/
  cursor?: CommentWhereUniqueInput
  /**
   * The number of Comments to fetch. If negative number, it will take Comments before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Comments.
  **/
  skip?: number
  distinct?: Enumerable<CommentDistinctFieldEnum>
}


/**
 * Comment create
 */
export type CommentCreateArgs = {
  /**
   * Select specific fields to fetch from the Comment
  **/
  select?: CommentSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CommentInclude | null
  /**
   * The data needed to create a Comment.
  **/
  data: CommentCreateInput
}


/**
 * Comment update
 */
export type CommentUpdateArgs = {
  /**
   * Select specific fields to fetch from the Comment
  **/
  select?: CommentSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CommentInclude | null
  /**
   * The data needed to update a Comment.
  **/
  data: CommentUpdateInput
  /**
   * Choose, which Comment to update.
  **/
  where: CommentWhereUniqueInput
}


/**
 * Comment updateMany
 */
export type CommentUpdateManyArgs = {
  data: CommentUpdateManyMutationInput
  where?: CommentWhereInput
}


/**
 * Comment upsert
 */
export type CommentUpsertArgs = {
  /**
   * Select specific fields to fetch from the Comment
  **/
  select?: CommentSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CommentInclude | null
  /**
   * The filter to search for the Comment to update in case it exists.
  **/
  where: CommentWhereUniqueInput
  /**
   * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
  **/
  create: CommentCreateInput
  /**
   * In case the Comment was found with the provided `where` argument, update it with this data.
  **/
  update: CommentUpdateInput
}


/**
 * Comment delete
 */
export type CommentDeleteArgs = {
  /**
   * Select specific fields to fetch from the Comment
  **/
  select?: CommentSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CommentInclude | null
  /**
   * Filter which Comment to delete.
  **/
  where: CommentWhereUniqueInput
}


/**
 * Comment deleteMany
 */
export type CommentDeleteManyArgs = {
  where?: CommentWhereInput
}


/**
 * Comment without action
 */
export type CommentArgs = {
  /**
   * Select specific fields to fetch from the Comment
  **/
  select?: CommentSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CommentInclude | null
}



/**
 * Model Photo
 */

export type Photo = {
  id: number
  name: string
  imgurl: string
  userId: number | null
}


export type AggregatePhoto = {
  count: number
  avg: PhotoAvgAggregateOutputType | null
  sum: PhotoSumAggregateOutputType | null
  min: PhotoMinAggregateOutputType | null
  max: PhotoMaxAggregateOutputType | null
}

export type PhotoAvgAggregateOutputType = {
  id: number
  userId: number
}

export type PhotoSumAggregateOutputType = {
  id: number
  userId: number | null
}

export type PhotoMinAggregateOutputType = {
  id: number
  userId: number | null
}

export type PhotoMaxAggregateOutputType = {
  id: number
  userId: number | null
}


export type PhotoAvgAggregateInputType = {
  id?: true
  userId?: true
}

export type PhotoSumAggregateInputType = {
  id?: true
  userId?: true
}

export type PhotoMinAggregateInputType = {
  id?: true
  userId?: true
}

export type PhotoMaxAggregateInputType = {
  id?: true
  userId?: true
}

export type AggregatePhotoArgs = {
  where?: PhotoWhereInput
  orderBy?: Enumerable<PhotoOrderByInput>
  cursor?: PhotoWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<PhotoDistinctFieldEnum>
  count?: true
  avg?: PhotoAvgAggregateInputType
  sum?: PhotoSumAggregateInputType
  min?: PhotoMinAggregateInputType
  max?: PhotoMaxAggregateInputType
}

export type GetPhotoAggregateType<T extends AggregatePhotoArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetPhotoAggregateScalarType<T[P]>
}

export type GetPhotoAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof PhotoAvgAggregateOutputType ? PhotoAvgAggregateOutputType[P] : never
}
    
    

export type PhotoSelect = {
  id?: boolean
  name?: boolean
  imgurl?: boolean
  userId?: boolean
  User?: boolean | UserArgs
  Comment?: boolean | FindManyCommentArgs
}

export type PhotoInclude = {
  User?: boolean | UserArgs
  Comment?: boolean | FindManyCommentArgs
}

export type PhotoGetPayload<
  S extends boolean | null | undefined | PhotoArgs,
  U = keyof S
> = S extends true
  ? Photo
  : S extends undefined
  ? never
  : S extends PhotoArgs | FindManyPhotoArgs
  ? 'include' extends U
    ? Photo  & {
      [P in TrueKeys<S['include']>]:
      P extends 'User'
      ? UserGetPayload<S['include'][P]> | null :
      P extends 'Comment'
      ? Array<CommentGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Photo ? Photo[P]
: 
      P extends 'User'
      ? UserGetPayload<S['select'][P]> | null :
      P extends 'Comment'
      ? Array<CommentGetPayload<S['select'][P]>> : never
    }
  : Photo
: Photo


export interface PhotoDelegate {
  /**
   * Find zero or one Photo.
   * @param {FindOnePhotoArgs} args - Arguments to find a Photo
   * @example
   * // Get one Photo
   * const photo = await prisma.photo.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOnePhotoArgs>(
    args: Subset<T, FindOnePhotoArgs>
  ): CheckSelect<T, Prisma__PhotoClient<Photo | null>, Prisma__PhotoClient<PhotoGetPayload<T> | null>>
  /**
   * Find zero or more Photos.
   * @param {FindManyPhotoArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Photos
   * const photos = await prisma.photo.findMany()
   * 
   * // Get first 10 Photos
   * const photos = await prisma.photo.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const photoWithIdOnly = await prisma.photo.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyPhotoArgs>(
    args?: Subset<T, FindManyPhotoArgs>
  ): CheckSelect<T, Promise<Array<Photo>>, Promise<Array<PhotoGetPayload<T>>>>
  /**
   * Create a Photo.
   * @param {PhotoCreateArgs} args - Arguments to create a Photo.
   * @example
   * // Create one Photo
   * const Photo = await prisma.photo.create({
   *   data: {
   *     // ... data to create a Photo
   *   }
   * })
   * 
  **/
  create<T extends PhotoCreateArgs>(
    args: Subset<T, PhotoCreateArgs>
  ): CheckSelect<T, Prisma__PhotoClient<Photo>, Prisma__PhotoClient<PhotoGetPayload<T>>>
  /**
   * Delete a Photo.
   * @param {PhotoDeleteArgs} args - Arguments to delete one Photo.
   * @example
   * // Delete one Photo
   * const Photo = await prisma.photo.delete({
   *   where: {
   *     // ... filter to delete one Photo
   *   }
   * })
   * 
  **/
  delete<T extends PhotoDeleteArgs>(
    args: Subset<T, PhotoDeleteArgs>
  ): CheckSelect<T, Prisma__PhotoClient<Photo>, Prisma__PhotoClient<PhotoGetPayload<T>>>
  /**
   * Update one Photo.
   * @param {PhotoUpdateArgs} args - Arguments to update one Photo.
   * @example
   * // Update one Photo
   * const photo = await prisma.photo.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends PhotoUpdateArgs>(
    args: Subset<T, PhotoUpdateArgs>
  ): CheckSelect<T, Prisma__PhotoClient<Photo>, Prisma__PhotoClient<PhotoGetPayload<T>>>
  /**
   * Delete zero or more Photos.
   * @param {PhotoDeleteManyArgs} args - Arguments to filter Photos to delete.
   * @example
   * // Delete a few Photos
   * const { count } = await prisma.photo.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends PhotoDeleteManyArgs>(
    args: Subset<T, PhotoDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Photos.
   * @param {PhotoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Photos
   * const photo = await prisma.photo.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends PhotoUpdateManyArgs>(
    args: Subset<T, PhotoUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Photo.
   * @param {PhotoUpsertArgs} args - Arguments to update or create a Photo.
   * @example
   * // Update or create a Photo
   * const photo = await prisma.photo.upsert({
   *   create: {
   *     // ... data to create a Photo
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Photo we want to update
   *   }
   * })
  **/
  upsert<T extends PhotoUpsertArgs>(
    args: Subset<T, PhotoUpsertArgs>
  ): CheckSelect<T, Prisma__PhotoClient<Photo>, Prisma__PhotoClient<PhotoGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyPhotoArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregatePhotoArgs>(args: Subset<T, AggregatePhotoArgs>): Promise<GetPhotoAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Photo.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__PhotoClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

  Comment<T extends FindManyCommentArgs = {}>(args?: Subset<T, FindManyCommentArgs>): CheckSelect<T, Promise<Array<Comment>>, Promise<Array<CommentGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Photo findOne
 */
export type FindOnePhotoArgs = {
  /**
   * Select specific fields to fetch from the Photo
  **/
  select?: PhotoSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PhotoInclude | null
  /**
   * Filter, which Photo to fetch.
  **/
  where: PhotoWhereUniqueInput
}


/**
 * Photo findMany
 */
export type FindManyPhotoArgs = {
  /**
   * Select specific fields to fetch from the Photo
  **/
  select?: PhotoSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PhotoInclude | null
  /**
   * Filter, which Photos to fetch.
  **/
  where?: PhotoWhereInput
  /**
   * Determine the order of the Photos to fetch.
  **/
  orderBy?: Enumerable<PhotoOrderByInput>
  /**
   * Sets the position for listing Photos.
  **/
  cursor?: PhotoWhereUniqueInput
  /**
   * The number of Photos to fetch. If negative number, it will take Photos before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Photos.
  **/
  skip?: number
  distinct?: Enumerable<PhotoDistinctFieldEnum>
}


/**
 * Photo create
 */
export type PhotoCreateArgs = {
  /**
   * Select specific fields to fetch from the Photo
  **/
  select?: PhotoSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PhotoInclude | null
  /**
   * The data needed to create a Photo.
  **/
  data: PhotoCreateInput
}


/**
 * Photo update
 */
export type PhotoUpdateArgs = {
  /**
   * Select specific fields to fetch from the Photo
  **/
  select?: PhotoSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PhotoInclude | null
  /**
   * The data needed to update a Photo.
  **/
  data: PhotoUpdateInput
  /**
   * Choose, which Photo to update.
  **/
  where: PhotoWhereUniqueInput
}


/**
 * Photo updateMany
 */
export type PhotoUpdateManyArgs = {
  data: PhotoUpdateManyMutationInput
  where?: PhotoWhereInput
}


/**
 * Photo upsert
 */
export type PhotoUpsertArgs = {
  /**
   * Select specific fields to fetch from the Photo
  **/
  select?: PhotoSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PhotoInclude | null
  /**
   * The filter to search for the Photo to update in case it exists.
  **/
  where: PhotoWhereUniqueInput
  /**
   * In case the Photo found by the `where` argument doesn't exist, create a new Photo with this data.
  **/
  create: PhotoCreateInput
  /**
   * In case the Photo was found with the provided `where` argument, update it with this data.
  **/
  update: PhotoUpdateInput
}


/**
 * Photo delete
 */
export type PhotoDeleteArgs = {
  /**
   * Select specific fields to fetch from the Photo
  **/
  select?: PhotoSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PhotoInclude | null
  /**
   * Filter which Photo to delete.
  **/
  where: PhotoWhereUniqueInput
}


/**
 * Photo deleteMany
 */
export type PhotoDeleteManyArgs = {
  where?: PhotoWhereInput
}


/**
 * Photo without action
 */
export type PhotoArgs = {
  /**
   * Select specific fields to fetch from the Photo
  **/
  select?: PhotoSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: PhotoInclude | null
}



/**
 * Model User
 */

export type User = {
  id: number
  name: string
  email: string
}


export type AggregateUser = {
  count: number
  avg: UserAvgAggregateOutputType | null
  sum: UserSumAggregateOutputType | null
  min: UserMinAggregateOutputType | null
  max: UserMaxAggregateOutputType | null
}

export type UserAvgAggregateOutputType = {
  id: number
}

export type UserSumAggregateOutputType = {
  id: number
}

export type UserMinAggregateOutputType = {
  id: number
}

export type UserMaxAggregateOutputType = {
  id: number
}


export type UserAvgAggregateInputType = {
  id?: true
}

export type UserSumAggregateInputType = {
  id?: true
}

export type UserMinAggregateInputType = {
  id?: true
}

export type UserMaxAggregateInputType = {
  id?: true
}

export type AggregateUserArgs = {
  where?: UserWhereInput
  orderBy?: Enumerable<UserOrderByInput>
  cursor?: UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
  count?: true
  avg?: UserAvgAggregateInputType
  sum?: UserSumAggregateInputType
  min?: UserMinAggregateInputType
  max?: UserMaxAggregateInputType
}

export type GetUserAggregateType<T extends AggregateUserArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetUserAggregateScalarType<T[P]>
}

export type GetUserAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof UserAvgAggregateOutputType ? UserAvgAggregateOutputType[P] : never
}
    
    

export type UserSelect = {
  id?: boolean
  name?: boolean
  email?: boolean
  Comment?: boolean | FindManyCommentArgs
  Photo?: boolean | FindManyPhotoArgs
}

export type UserInclude = {
  Comment?: boolean | FindManyCommentArgs
  Photo?: boolean | FindManyPhotoArgs
}

export type UserGetPayload<
  S extends boolean | null | undefined | UserArgs,
  U = keyof S
> = S extends true
  ? User
  : S extends undefined
  ? never
  : S extends UserArgs | FindManyUserArgs
  ? 'include' extends U
    ? User  & {
      [P in TrueKeys<S['include']>]:
      P extends 'Comment'
      ? Array<CommentGetPayload<S['include'][P]>> :
      P extends 'Photo'
      ? Array<PhotoGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof User ? User[P]
: 
      P extends 'Comment'
      ? Array<CommentGetPayload<S['select'][P]>> :
      P extends 'Photo'
      ? Array<PhotoGetPayload<S['select'][P]>> : never
    }
  : User
: User


export interface UserDelegate {
  /**
   * Find zero or one User.
   * @param {FindOneUserArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneUserArgs>(
    args: Subset<T, FindOneUserArgs>
  ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
  /**
   * Find zero or more Users.
   * @param {FindManyUserArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Users
   * const users = await prisma.user.findMany()
   * 
   * // Get first 10 Users
   * const users = await prisma.user.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyUserArgs>(
    args?: Subset<T, FindManyUserArgs>
  ): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>
  /**
   * Create a User.
   * @param {UserCreateArgs} args - Arguments to create a User.
   * @example
   * // Create one User
   * const User = await prisma.user.create({
   *   data: {
   *     // ... data to create a User
   *   }
   * })
   * 
  **/
  create<T extends UserCreateArgs>(
    args: Subset<T, UserCreateArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Delete a User.
   * @param {UserDeleteArgs} args - Arguments to delete one User.
   * @example
   * // Delete one User
   * const User = await prisma.user.delete({
   *   where: {
   *     // ... filter to delete one User
   *   }
   * })
   * 
  **/
  delete<T extends UserDeleteArgs>(
    args: Subset<T, UserDeleteArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Update one User.
   * @param {UserUpdateArgs} args - Arguments to update one User.
   * @example
   * // Update one User
   * const user = await prisma.user.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends UserUpdateArgs>(
    args: Subset<T, UserUpdateArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Delete zero or more Users.
   * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
   * @example
   * // Delete a few Users
   * const { count } = await prisma.user.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends UserDeleteManyArgs>(
    args: Subset<T, UserDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Users.
   * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Users
   * const user = await prisma.user.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends UserUpdateManyArgs>(
    args: Subset<T, UserUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one User.
   * @param {UserUpsertArgs} args - Arguments to update or create a User.
   * @example
   * // Update or create a User
   * const user = await prisma.user.upsert({
   *   create: {
   *     // ... data to create a User
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the User we want to update
   *   }
   * })
  **/
  upsert<T extends UserUpsertArgs>(
    args: Subset<T, UserUpsertArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyUserArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateUserArgs>(args: Subset<T, AggregateUserArgs>): Promise<GetUserAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for User.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__UserClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  Comment<T extends FindManyCommentArgs = {}>(args?: Subset<T, FindManyCommentArgs>): CheckSelect<T, Promise<Array<Comment>>, Promise<Array<CommentGetPayload<T>>>>;

  Photo<T extends FindManyPhotoArgs = {}>(args?: Subset<T, FindManyPhotoArgs>): CheckSelect<T, Promise<Array<Photo>>, Promise<Array<PhotoGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * User findOne
 */
export type FindOneUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter, which User to fetch.
  **/
  where: UserWhereUniqueInput
}


/**
 * User findMany
 */
export type FindManyUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter, which Users to fetch.
  **/
  where?: UserWhereInput
  /**
   * Determine the order of the Users to fetch.
  **/
  orderBy?: Enumerable<UserOrderByInput>
  /**
   * Sets the position for listing Users.
  **/
  cursor?: UserWhereUniqueInput
  /**
   * The number of Users to fetch. If negative number, it will take Users before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Users.
  **/
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
}


/**
 * User create
 */
export type UserCreateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * The data needed to create a User.
  **/
  data: UserCreateInput
}


/**
 * User update
 */
export type UserUpdateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * The data needed to update a User.
  **/
  data: UserUpdateInput
  /**
   * Choose, which User to update.
  **/
  where: UserWhereUniqueInput
}


/**
 * User updateMany
 */
export type UserUpdateManyArgs = {
  data: UserUpdateManyMutationInput
  where?: UserWhereInput
}


/**
 * User upsert
 */
export type UserUpsertArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * The filter to search for the User to update in case it exists.
  **/
  where: UserWhereUniqueInput
  /**
   * In case the User found by the `where` argument doesn't exist, create a new User with this data.
  **/
  create: UserCreateInput
  /**
   * In case the User was found with the provided `where` argument, update it with this data.
  **/
  update: UserUpdateInput
}


/**
 * User delete
 */
export type UserDeleteArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter which User to delete.
  **/
  where: UserWhereUniqueInput
}


/**
 * User deleteMany
 */
export type UserDeleteManyArgs = {
  where?: UserWhereInput
}


/**
 * User without action
 */
export type UserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
}



/**
 * Deep Input Types
 */


export type CommentWhereInput = {
  AND?: Enumerable<CommentWhereInput>
  OR?: Array<CommentWhereInput>
  NOT?: Enumerable<CommentWhereInput>
  id?: number | IntFilter
  text?: string | StringFilter
  photoId?: number | IntNullableFilter | null
  userId?: number | IntNullableFilter | null
  Photo?: PhotoWhereInput | null
  User?: UserWhereInput | null
}

export type CommentOrderByInput = {
  id?: SortOrder
  text?: SortOrder
  photoId?: SortOrder
  userId?: SortOrder
}

export type CommentWhereUniqueInput = {
  id?: number
}

export type PhotoWhereInput = {
  AND?: Enumerable<PhotoWhereInput>
  OR?: Array<PhotoWhereInput>
  NOT?: Enumerable<PhotoWhereInput>
  id?: number | IntFilter
  name?: string | StringFilter
  imgurl?: string | StringFilter
  userId?: number | IntNullableFilter | null
  User?: UserWhereInput | null
  Comment?: CommentListRelationFilter
}

export type PhotoOrderByInput = {
  id?: SortOrder
  name?: SortOrder
  imgurl?: SortOrder
  userId?: SortOrder
}

export type PhotoWhereUniqueInput = {
  id?: number
  imgurl?: string
}

export type UserWhereInput = {
  AND?: Enumerable<UserWhereInput>
  OR?: Array<UserWhereInput>
  NOT?: Enumerable<UserWhereInput>
  id?: number | IntFilter
  name?: string | StringFilter
  email?: string | StringFilter
  Comment?: CommentListRelationFilter
  Photo?: PhotoListRelationFilter
}

export type UserOrderByInput = {
  id?: SortOrder
  name?: SortOrder
  email?: SortOrder
}

export type UserWhereUniqueInput = {
  id?: number
}

export type CommentCreateInput = {
  text: string
  Photo?: PhotoCreateOneWithoutCommentInput
  User?: UserCreateOneWithoutCommentInput
}

export type CommentUpdateInput = {
  text?: string | StringFieldUpdateOperationsInput
  Photo?: PhotoUpdateOneWithoutCommentInput
  User?: UserUpdateOneWithoutCommentInput
}

export type CommentUpdateManyMutationInput = {
  text?: string | StringFieldUpdateOperationsInput
}

export type PhotoCreateInput = {
  name: string
  imgurl: string
  User?: UserCreateOneWithoutPhotoInput
  Comment?: CommentCreateManyWithoutPhotoInput
}

export type PhotoUpdateInput = {
  name?: string | StringFieldUpdateOperationsInput
  imgurl?: string | StringFieldUpdateOperationsInput
  User?: UserUpdateOneWithoutPhotoInput
  Comment?: CommentUpdateManyWithoutPhotoInput
}

export type PhotoUpdateManyMutationInput = {
  name?: string | StringFieldUpdateOperationsInput
  imgurl?: string | StringFieldUpdateOperationsInput
}

export type UserCreateInput = {
  name: string
  email: string
  Comment?: CommentCreateManyWithoutUserInput
  Photo?: PhotoCreateManyWithoutUserInput
}

export type UserUpdateInput = {
  name?: string | StringFieldUpdateOperationsInput
  email?: string | StringFieldUpdateOperationsInput
  Comment?: CommentUpdateManyWithoutUserInput
  Photo?: PhotoUpdateManyWithoutUserInput
}

export type UserUpdateManyMutationInput = {
  name?: string | StringFieldUpdateOperationsInput
  email?: string | StringFieldUpdateOperationsInput
}

export type IntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntFilter
}

export type StringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringFilter
}

export type IntNullableFilter = {
  equals?: number | null
  in?: Enumerable<number> | null
  notIn?: Enumerable<number> | null
  lt?: number | null
  lte?: number | null
  gt?: number | null
  gte?: number | null
  not?: number | NestedIntNullableFilter | null
}

export type PhotoRelationFilter = {
  is?: PhotoWhereInput | null
  isNot?: PhotoWhereInput | null
}

export type UserRelationFilter = {
  is?: UserWhereInput | null
  isNot?: UserWhereInput | null
}

export type CommentListRelationFilter = {
  every?: CommentWhereInput
  some?: CommentWhereInput
  none?: CommentWhereInput
}

export type PhotoListRelationFilter = {
  every?: PhotoWhereInput
  some?: PhotoWhereInput
  none?: PhotoWhereInput
}

export type PhotoCreateOneWithoutCommentInput = {
  create?: PhotoCreateWithoutCommentInput
  connect?: PhotoWhereUniqueInput
}

export type UserCreateOneWithoutCommentInput = {
  create?: UserCreateWithoutCommentInput
  connect?: UserWhereUniqueInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type PhotoUpdateOneWithoutCommentInput = {
  create?: PhotoCreateWithoutCommentInput
  connect?: PhotoWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: PhotoUpdateWithoutCommentDataInput
  upsert?: PhotoUpsertWithoutCommentInput
}

export type UserUpdateOneWithoutCommentInput = {
  create?: UserCreateWithoutCommentInput
  connect?: UserWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: UserUpdateWithoutCommentDataInput
  upsert?: UserUpsertWithoutCommentInput
}

export type UserCreateOneWithoutPhotoInput = {
  create?: UserCreateWithoutPhotoInput
  connect?: UserWhereUniqueInput
}

export type CommentCreateManyWithoutPhotoInput = {
  create?: Enumerable<CommentCreateWithoutPhotoInput>
  connect?: Enumerable<CommentWhereUniqueInput>
}

export type UserUpdateOneWithoutPhotoInput = {
  create?: UserCreateWithoutPhotoInput
  connect?: UserWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: UserUpdateWithoutPhotoDataInput
  upsert?: UserUpsertWithoutPhotoInput
}

export type CommentUpdateManyWithoutPhotoInput = {
  create?: Enumerable<CommentCreateWithoutPhotoInput>
  connect?: Enumerable<CommentWhereUniqueInput>
  set?: Enumerable<CommentWhereUniqueInput>
  disconnect?: Enumerable<CommentWhereUniqueInput>
  delete?: Enumerable<CommentWhereUniqueInput>
  update?: Enumerable<CommentUpdateWithWhereUniqueWithoutPhotoInput>
  updateMany?: Enumerable<CommentUpdateManyWithWhereNestedInput> | null
  deleteMany?: Enumerable<CommentScalarWhereInput>
  upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutPhotoInput>
}

export type CommentCreateManyWithoutUserInput = {
  create?: Enumerable<CommentCreateWithoutUserInput>
  connect?: Enumerable<CommentWhereUniqueInput>
}

export type PhotoCreateManyWithoutUserInput = {
  create?: Enumerable<PhotoCreateWithoutUserInput>
  connect?: Enumerable<PhotoWhereUniqueInput>
}

export type CommentUpdateManyWithoutUserInput = {
  create?: Enumerable<CommentCreateWithoutUserInput>
  connect?: Enumerable<CommentWhereUniqueInput>
  set?: Enumerable<CommentWhereUniqueInput>
  disconnect?: Enumerable<CommentWhereUniqueInput>
  delete?: Enumerable<CommentWhereUniqueInput>
  update?: Enumerable<CommentUpdateWithWhereUniqueWithoutUserInput>
  updateMany?: Enumerable<CommentUpdateManyWithWhereNestedInput> | null
  deleteMany?: Enumerable<CommentScalarWhereInput>
  upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutUserInput>
}

export type PhotoUpdateManyWithoutUserInput = {
  create?: Enumerable<PhotoCreateWithoutUserInput>
  connect?: Enumerable<PhotoWhereUniqueInput>
  set?: Enumerable<PhotoWhereUniqueInput>
  disconnect?: Enumerable<PhotoWhereUniqueInput>
  delete?: Enumerable<PhotoWhereUniqueInput>
  update?: Enumerable<PhotoUpdateWithWhereUniqueWithoutUserInput>
  updateMany?: Enumerable<PhotoUpdateManyWithWhereNestedInput> | null
  deleteMany?: Enumerable<PhotoScalarWhereInput>
  upsert?: Enumerable<PhotoUpsertWithWhereUniqueWithoutUserInput>
}

export type NestedIntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: NestedIntFilter | null
}

export type NestedStringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: NestedStringFilter | null
}

export type NestedIntNullableFilter = {
  equals?: number | null
  in?: Enumerable<number> | null
  notIn?: Enumerable<number> | null
  lt?: number | null
  lte?: number | null
  gt?: number | null
  gte?: number | null
  not?: NestedIntNullableFilter | null
}

export type PhotoCreateWithoutCommentInput = {
  name: string
  imgurl: string
  User?: UserCreateOneWithoutPhotoInput
}

export type UserCreateWithoutCommentInput = {
  name: string
  email: string
  Photo?: PhotoCreateManyWithoutUserInput
}

export type PhotoUpdateWithoutCommentDataInput = {
  name?: string | StringFieldUpdateOperationsInput
  imgurl?: string | StringFieldUpdateOperationsInput
  User?: UserUpdateOneWithoutPhotoInput
}

export type PhotoUpsertWithoutCommentInput = {
  update: PhotoUpdateWithoutCommentDataInput
  create: PhotoCreateWithoutCommentInput
}

export type UserUpdateWithoutCommentDataInput = {
  name?: string | StringFieldUpdateOperationsInput
  email?: string | StringFieldUpdateOperationsInput
  Photo?: PhotoUpdateManyWithoutUserInput
}

export type UserUpsertWithoutCommentInput = {
  update: UserUpdateWithoutCommentDataInput
  create: UserCreateWithoutCommentInput
}

export type UserCreateWithoutPhotoInput = {
  name: string
  email: string
  Comment?: CommentCreateManyWithoutUserInput
}

export type CommentCreateWithoutPhotoInput = {
  text: string
  User?: UserCreateOneWithoutCommentInput
}

export type UserUpdateWithoutPhotoDataInput = {
  name?: string | StringFieldUpdateOperationsInput
  email?: string | StringFieldUpdateOperationsInput
  Comment?: CommentUpdateManyWithoutUserInput
}

export type UserUpsertWithoutPhotoInput = {
  update: UserUpdateWithoutPhotoDataInput
  create: UserCreateWithoutPhotoInput
}

export type CommentUpdateWithWhereUniqueWithoutPhotoInput = {
  where: CommentWhereUniqueInput
  data: CommentUpdateWithoutPhotoDataInput
}

export type CommentUpdateManyWithWhereNestedInput = {
  where: CommentScalarWhereInput
  data: CommentUpdateManyDataInput
}

export type CommentScalarWhereInput = {
  AND?: Enumerable<CommentScalarWhereInput>
  OR?: Array<CommentScalarWhereInput>
  NOT?: Enumerable<CommentScalarWhereInput>
  id?: number | IntFilter
  text?: string | StringFilter
  photoId?: number | IntNullableFilter | null
  userId?: number | IntNullableFilter | null
}

export type CommentUpsertWithWhereUniqueWithoutPhotoInput = {
  where: CommentWhereUniqueInput
  update: CommentUpdateWithoutPhotoDataInput
  create: CommentCreateWithoutPhotoInput
}

export type CommentCreateWithoutUserInput = {
  text: string
  Photo?: PhotoCreateOneWithoutCommentInput
}

export type PhotoCreateWithoutUserInput = {
  name: string
  imgurl: string
  Comment?: CommentCreateManyWithoutPhotoInput
}

export type CommentUpdateWithWhereUniqueWithoutUserInput = {
  where: CommentWhereUniqueInput
  data: CommentUpdateWithoutUserDataInput
}

export type CommentUpsertWithWhereUniqueWithoutUserInput = {
  where: CommentWhereUniqueInput
  update: CommentUpdateWithoutUserDataInput
  create: CommentCreateWithoutUserInput
}

export type PhotoUpdateWithWhereUniqueWithoutUserInput = {
  where: PhotoWhereUniqueInput
  data: PhotoUpdateWithoutUserDataInput
}

export type PhotoUpdateManyWithWhereNestedInput = {
  where: PhotoScalarWhereInput
  data: PhotoUpdateManyDataInput
}

export type PhotoScalarWhereInput = {
  AND?: Enumerable<PhotoScalarWhereInput>
  OR?: Array<PhotoScalarWhereInput>
  NOT?: Enumerable<PhotoScalarWhereInput>
  id?: number | IntFilter
  name?: string | StringFilter
  imgurl?: string | StringFilter
  userId?: number | IntNullableFilter | null
}

export type PhotoUpsertWithWhereUniqueWithoutUserInput = {
  where: PhotoWhereUniqueInput
  update: PhotoUpdateWithoutUserDataInput
  create: PhotoCreateWithoutUserInput
}

export type CommentUpdateWithoutPhotoDataInput = {
  text?: string | StringFieldUpdateOperationsInput
  User?: UserUpdateOneWithoutCommentInput
}

export type CommentUpdateManyDataInput = {
  text?: string | StringFieldUpdateOperationsInput
}

export type CommentUpdateWithoutUserDataInput = {
  text?: string | StringFieldUpdateOperationsInput
  Photo?: PhotoUpdateOneWithoutCommentInput
}

export type PhotoUpdateWithoutUserDataInput = {
  name?: string | StringFieldUpdateOperationsInput
  imgurl?: string | StringFieldUpdateOperationsInput
  Comment?: CommentUpdateManyWithoutPhotoInput
}

export type PhotoUpdateManyDataInput = {
  name?: string | StringFieldUpdateOperationsInput
  imgurl?: string | StringFieldUpdateOperationsInput
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
